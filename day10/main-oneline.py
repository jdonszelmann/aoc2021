
print("part 1: {}\npart 2:{}".format(*(lambda data, opening_map, reduce, mean, inp: (lambda corrupted: (sum(corrupted(i)[0] for i in inp),mean((lambda r: [reduce(lambda acc, val: acc * 5 + data[val][0], i, 0) for i in r])([c[1] for i in inp if (c := corrupted(i))[0] == 0]))))(lambda line: (lambda s, b, c: (c, []) if not b else (0, [opening_map[i] for i in s[::-1]]))(*reduce(lambda acc, val: ((((acc[0][:-1], True, acc[2])if data[val][2] == acc[0][-1] else(acc[0][:-1], False, data[val][1]))if val in data else(acc[0] + [val], True, acc[2])) if acc[1] else(acc[0], False, acc[2])), line, ([], True, 0)))))({")": (1, 3, "("),"]": (2, 57, "["),"}": (3, 1197, "{"),">": (4, 25137, "<"),}, {"(": ")","[": "]","{": "}","<": ">",}, __import__("functools").reduce, lambda i: sorted(i)[len(i)//2], [i.strip() for i in open("input.txt").readlines() if i.strip() != ""])))

